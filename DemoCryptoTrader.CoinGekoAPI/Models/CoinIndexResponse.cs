// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DemoCryptoTrader.CoinGekoAPI.Models;
//
//    var coinIndexResponse = CoinIndexResponse.FromJson(jsonString);

namespace DemoCryptoTrader.CoinGekoAPI.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    public partial class CoinIndexResponse
    {
        [J("id", NullValueHandling = N.Ignore)] public string Id { get; set; }
        [J("symbol", NullValueHandling = N.Ignore)] public string Symbol { get; set; }
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("image", NullValueHandling = N.Ignore)] public Uri Image { get; set; }
        [J("current_price", Required = R.Always)] public double CurrentPrice { get; set; }
        [J("market_cap", NullValueHandling = N.Ignore)] public long? MarketCap { get; set; }
        [J("market_cap_rank", NullValueHandling = N.Ignore)] public long? MarketCapRank { get; set; }
        [J("total_volume", NullValueHandling = N.Ignore)] public long? TotalVolume { get; set; }
        [J("high_24h", NullValueHandling = N.Ignore)] public double? High24H { get; set; }
        [J("low_24h", NullValueHandling = N.Ignore)] public double? Low24H { get; set; }
        [J("price_change_24h", Required = R.Always)] public double? PriceChange24H { get; set; }
        [J("price_change_percentage_24h", NullValueHandling = N.Ignore)] public double PriceChangePercentage24H { get; set; }
        [J("market_cap_change_24h", NullValueHandling = N.Ignore)] public long? MarketCapChange24H { get; set; }
        [J("market_cap_change_percentage_24h", NullValueHandling = N.Ignore)] public double? MarketCapChangePercentage24H { get; set; }
        [J("circulating_supply", NullValueHandling = N.Ignore)] public double? CirculatingSupply { get; set; }
        [J("total_supply")] public dynamic TotalSupply { get; set; }
        [J("ath", NullValueHandling = N.Ignore)] public double? Ath { get; set; }
        [J("ath_change_percentage", NullValueHandling = N.Ignore)] public double? AthChangePercentage { get; set; }
        [J("ath_date", NullValueHandling = N.Ignore)] public DateTimeOffset? AthDate { get; set; }
        [J("atl", NullValueHandling = N.Ignore)] public double? Atl { get; set; }
        [J("atl_change_percentage", NullValueHandling = N.Ignore)] public double? AtlChangePercentage { get; set; }
        [J("atl_date", NullValueHandling = N.Ignore)] public DateTimeOffset? AtlDate { get; set; }
        [J("roi", NullValueHandling = N.Ignore)] public Roi Roi { get; set; }
        [J("last_updated", NullValueHandling = N.Ignore)] public DateTimeOffset? LastUpdated { get; set; }
    }

    public partial class Roi
    {
        [J("times", NullValueHandling = N.Ignore)] public double? Times { get; set; }
        [J("currency", NullValueHandling = N.Ignore)] public string Currency { get; set; }
        [J("percentage", NullValueHandling = N.Ignore)] public double? Percentage { get; set; }
    }

    public partial class CoinIndexResponse
    {
        public static List<CoinIndexResponse> FromJson(string json) => JsonConvert.DeserializeObject<List<CoinIndexResponse>>(json, DemoCryptoTrader.CoinGekoAPI.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<CoinIndexResponse> self) => JsonConvert.SerializeObject(self, DemoCryptoTrader.CoinGekoAPI.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}